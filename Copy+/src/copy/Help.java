/*
 * Help.java
 */
package copy;

import java.util.*;
import javax.swing.*;

/**
 *
 * @author Abhishek.D
 */
public class Help extends JFrame {

    private String hlpval,  Serc;
    private DefaultListModel L_M = new DefaultListModel();
    private List<String> back = new ArrayList<String>();
    private int i = -1,  k = 0,  n = 0,  o = 0,  s = 0,  seli = 0,  selc = 0,  cl = 0,  clc = 0,  si = 0,  alri = 0;
    private List<Integer> alr = new ArrayList<Integer>();
    private boolean nech = false;
    private List<Integer> sel = new ArrayList<Integer>();
    private String[] hlpd = {
        "<html>" +
        "<center><b><u>Files Copying</u></b></center>" +
        "<br>" +
        "You can copy large selection of files by:-" +
        "<br>" +
        "<ul>" +
        "<li>Selecting Files Category" +
        "<li>Pressing the start button" +
        "<li>Start copying by normal method one by one (right-click or ctrl+c)" +
        "<li>Once you are done press the stop button" +
        "<li>Now if you wish, you may press the edit button to edit your selection." +
        "<li>Press the clear button after selection to remove them." +
        "<li>After this you should press the paste button to paste in your desired location." +
        "<li>You can press the clear button to clear all data in the category." +
        "</ul>" +
        "<br>" +
        "This update our database as you simply copy a file or group of files with it dynamically." +
        "<br>" +
        "This means you dont have to keep pressing the shift or ctrl key to select large no: of files." +
        "</html>",
        "<html>" +
        "<center><b><u>Folder Copying</u></b></center>" +
        "<br>" +
        "You can copy large selection of Folders by:-" +
        "<br>" +
        "<ul>" +
        "<li>Selecting Folder Category" +
        "<li>Pressing the start button" +
        "<li>Start copying by normal method one by one (right-click or ctrl+c)" +
        "<li>Once you are done press the stop button" +
        "<li>Now if you wish, you may press the edit button to edit your selection." +
        "<li>Press the clear button after selection to remove them." +
        "<li>After this you should press the paste button to paste in your desired location." +
        "<li>You can press the clear button to clear all data in the category." +
        "</ul>" +
        "<br>" +
        "This update our database as you simply copy a folder or group of folders with it dynamically." +
        "<br>" +
        "This means you dont have to keep pressing the shift or ctrl key to select large no: of folders." +
        "</html>",
        "<html>" +
        "<center><b><u>Text Copying</u></b></center>" +
        "<br>" +
        "You can copy large no: Text from different sources by:-" +
        "<br>" +
        "<ul>" +
        "<li>Selecting Text Category" +
        "<li>Pressing the start button" +
        "<li>Start copying by normal method one by one (right-click or ctrl+c)" +
        "<li>Once you are done press the stop button" +
        "<li>Now if you wish, you may press the edit button to edit your selection." +
        "<li>Press the edit button after editing to edit them." +
        "<li>After this you should press the paste button to paste the final result in your clipboard." +
        "<li>You can press the clear button to clear all data in the category." +
        "</ul>" +
        "<br>" +
        "This update our database as you simply copy text with it dynamically." +
        "<br>" +
        "This means you dont have to keep pressing the shift or ctrl key to select large no: of text." +
        "</html>",
        "<html>" +
        "<center><b><u>Short Keys</u></b></center>" +
        "<br>" +
        "Short keys:-" +
        "<br>" +
        "<ul>" +
        "<li>S - Start/Stop" +
        "<li>P - Paste" +
        "<li>E - Edit" +
        "<li>C - Clear" +
        "<li>CTRL+N - New Copy List" +
        "<li>CTRL+O - Open existing Copy List" +
        "<li>CTRL+S - Save current Copy List" +
        "<li>CTRL+SHIFT+S - Save current Copy List with new Name" +
        "<li>You may Enable/Disable Auto clear in Action menu to automatically clear database after one paste." +
        "</ul>" +
        "<br>" +
        "By saving, you can retrieve you 'list of files to copy' later." +
        "</html>"
    };

    /** Creates new form Help */
    public Help() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        Back_B = new javax.swing.JButton();
        Pan_P = new javax.swing.JScrollPane();
        Help_T = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        Cont_T = new javax.swing.JTree();
        scrol = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        ser = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        Back_B.setIcon(new javax.swing.ImageIcon(getClass().getResource("/copy/back.png"))); // NOI18N
        Back_B.setToolTipText("Back");
        Back_B.setFocusable(false);
        Back_B.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Back_B.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Back_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_BActionPerformed(evt);
            }
        });
        jToolBar1.add(Back_B);

        Help_T.setEditable(false);
        Pan_P.setViewportView(Help_T);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Help");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("HowTo");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("File Copying");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Folder Copying");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Text Copying");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Short Keys");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        Cont_T.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        Cont_T.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Cont_TMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Cont_TMouseExited(evt);
            }
        });
        Cont_T.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                Cont_TValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(Cont_T);

        jTabbedPane1.addTab("Contents", jScrollPane3);

        list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(list);

        ser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                serKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout scrolLayout = new javax.swing.GroupLayout(scrol);
        scrol.setLayout(scrolLayout);
        scrolLayout.setHorizontalGroup(
            scrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ser, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
        );
        scrolLayout.setVerticalGroup(
            scrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scrolLayout.createSequentialGroup()
                .addComponent(ser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Search", scrol);

        jScrollPane2.setViewportView(jTabbedPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Pan_P, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                    .addComponent(Pan_P, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Cont_TValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_Cont_TValueChanged
        if (Arrays.toString(Cont_T.getSelectionRows()).indexOf(",") == -1) {
            hlpval = Arrays.toString(Cont_T.getSelectionRows());
            if (!(hlpval.contentEquals("[0]") || hlpval.contentEquals("[1]"))) {
                System.out.println(hlpval);
                hlpval = hlpval.replace("[", "");
                hlpval = hlpval.replace("]", "");
                if (nech) {
                    i++;
                    s = i;
                }
                for (k = (i + 1); k < back.size(); k++) {
                    back.remove(k);
                }
                back.add(i, hlpval);
                Help_T.setContentType("text/html");
                Help_T.setText(hlpd[Integer.parseInt(hlpval) - 2]);
                System.out.println(s + ", " + i);
            }
        }
}//GEN-LAST:event_Cont_TValueChanged

    private void Back_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_BActionPerformed
        if (i > 0) {
            i--;
            hlpval = back.get(i);
            Help_T.setContentType("text/html");
            Help_T.setText(hlpd[Integer.parseInt(hlpval) - 2]);
            Cont_T.setSelectionRow(Integer.parseInt(hlpval));
        }
}//GEN-LAST:event_Back_BActionPerformed

    private void serKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serKeyTyped
        try {
            alr.clear();
            L_M.clear();
            o = 0;
            seli = 0;
            alri = 0;
            selc = 0;
            clc = 0;
            for (si = 0; si < ser.getText().split(" ").length; si++) {
                Serc = ser.getText().split(" ")[si];
                for (n = 0; n < hlpd.length; n++) {
                    if (hlpd[n].toLowerCase().contains(Serc.toLowerCase())) {
                        sel.add(seli, hlpd[n].indexOf(Serc, selc));
                        selc = sel.get(seli);
                        seli++;
                        list.setModel(L_M);
                        switch (n) {
                            case 0:
                                if (!(alr.contains(n))) {
                                    L_M.addElement("File Copying");
                                    if (clc == 0) {
                                        cl = n;
                                        clc = 1;
                                    }
                                }
                                break;
                            case 1:
                                if (!(alr.contains(n))) {
                                    L_M.addElement("Folder Copying");
                                    if (clc == 0) {
                                        cl = n;
                                        clc = 1;
                                    }
                                }
                                break;
                            case 2:
                                if (!(alr.contains(n))) {
                                    L_M.addElement("Text Copying");
                                    if (clc == 0) {
                                        cl = n;
                                        clc = 1;
                                    }
                                }
                                break;
                            case 3:
                                if (!(alr.contains(n))) {
                                    L_M.addElement("Short keys");
                                    if (clc == 0) {
                                        cl = n;
                                        clc = 1;
                                    }
                                }
                                break;
                        }
                        alr.add(alri, n);
                        alri++;
                    }
                }
            }
        } catch (Exception e) {
        }
}//GEN-LAST:event_serKeyTyped

    private void Cont_TMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Cont_TMouseEntered
        nech = true;
    }//GEN-LAST:event_Cont_TMouseEntered

    private void Cont_TMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Cont_TMouseExited
        nech = false;
    }//GEN-LAST:event_Cont_TMouseExited

    private void listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listValueChanged
        try {
            if (Arrays.toString(list.getSelectedIndices()).indexOf(",") == -1) {
                hlpval = Arrays.toString(list.getSelectedIndices());
                hlpval = hlpval.replace("[", "");
                hlpval = hlpval.replace("]", "");
                System.out.println(hlpval + ", " + list.getSelectedValue().toString());
                Help_T.setContentType("text/html");
                if (list.getSelectedValue().toString().contentEquals("File Copying")) {
                    Help_T.setText(hlpd[0]);
                } else if (list.getSelectedValue().toString().contentEquals("Folder Copying")) {
                    Help_T.setText(hlpd[1]);
                } else if (list.getSelectedValue().toString().contentEquals("Text Copying")) {
                    Help_T.setText(hlpd[2]);
                } else if (list.getSelectedValue().toString().contentEquals("Short keys")) {
                    Help_T.setText(hlpd[3]);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_listValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Help hlp = new Help();

                hlp.setTitle("Help");
                hlp.setVisible(false);
                hlp.setSize(586, 389);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back_B;
    private javax.swing.JTree Cont_T;
    private javax.swing.JEditorPane Help_T;
    private javax.swing.JScrollPane Pan_P;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList list;
    private javax.swing.JPanel scrol;
    private javax.swing.JTextField ser;
    // End of variables declaration//GEN-END:variables
}
